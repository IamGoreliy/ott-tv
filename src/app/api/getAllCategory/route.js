import {createRouter} from "next-connect";
import {NextResponse} from "next/server";
import Redis from "ioredis";
import {tokenForRead} from "@/utils/fetchOptionForApiSearchMovie";
import {handelGetAdditionalData} from "@/app/api/getAllCategory/serverUtils";
import {fetchSideAPI} from "@/app/serverUtils/utils/fetchForSideServer";
import {handleReceivingAndSortingData} from "@/app/serverUtils/utils/handlerDataProcessorAndSorted"


const router = createRouter();
const redis = new Redis({
    host: 'ott-tv-redis',
    port: 6379,
});

const CACHE_KEY = 'allCategoryData';
// üçâüçâüçâ url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤
const urlGetListAllGenresMovie = 'https://api.themoviedb.org/3/genre/movie/list?language=en';
// üçàüçàüçà url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ç–≤ —à–æ—É
const urlGetListAllGenresShows = 'https://api.themoviedb.org/3/genre/tv/list?language=en';
// üìºüìºüìº url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∂–∞–Ω—Ä—É (—Ñ–∏–ª—å–º—ã)
const urlSpecialGenreMovie = 'https://api.themoviedb.org/3/discover/movie?include_adult=false&include_video=false&language=en-US&page=1&sort_by=popularity.desc&with_genres=';
// üìΩÔ∏èüìΩÔ∏èüìΩÔ∏è url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑—ã –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∂–∞–Ω—Ä—É (—Å–µ—Ä–∏–∞–ª—ã)
const urlSpecialGenreShows = 'https://api.themoviedb.org/3/discover/tv?include_adult=false&include_null_first_air_dates=false&language=en-US&page=1&sort_by=popularity.desc&with_genres=';
// üîùüîùüîù url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤
const urlGetTopListMovie = 'https://api.themoviedb.org/3/movie/top_rated?language=en-US&page=1';
// üîùüîùüîù url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Å–ø–∏–∫–∞ tv-shows –∏ —Å–µ—Ä–∏–∞–ª–æ–≤
const urlGetTopListShows = 'https://api.themoviedb.org/3/tv/top_rated?language=en-US&page=1';
// url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ Upcoming (—Ñ–∏–ª—å–º—ã)
const urlGetListUpcomingMovie = 'https://api.themoviedb.org/3/movie/upcoming?language=en-US&page=1';
// url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ü–∏–∏ Upcoming (—Å–µ—Ä–∏–∞–ª—ã)
const urlGetListUpcomingShows = 'https://api.themoviedb.org/3/tv/airing_today?language=en-US&page=1';
// url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–∫–∏–∏ popular —Ñ–∏–ª—å–º—ã
const urlGetPopularMovies = 'https://api.themoviedb.org/3/movie/popular?language=en-US&page=1';
// url –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ–∫–∏–∏ popular —Å–µ—Ä–∏–∞–ª—ã
const urlGetPopularShows = 'https://api.themoviedb.org/3/tv/popular?language=en-US&page=1';

const updateCache = async () => {
    try {
        // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤ (–≤—Å–µ–≥–æ 19 –∂–∞–Ω—Ä–æ–≤)
        const {genres: genresMovie} = await fetchSideAPI(urlGetListAllGenresMovie);
        // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ —Å–µ—Ä–∏–∞–ª–æ–≤
        const {genres: genresShows} = await fetchSideAPI(urlGetListAllGenresShows);
        // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—Å–µ–≥–æ 19 –∑–∞–ø—Ä–æ—Å–æ–≤) —Å–æ—Ç–∏—Ä–æ–≤–∫–∞ –∏ –∏–∑–≤–ª–µ—Å—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const sortedData = await Promise.all([genresMovie, genresShows].map((ele, index) => handleReceivingAndSortingData(ele, index, [urlSpecialGenreMovie, urlSpecialGenreShows])));
        // üçèüçèüçè –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ñ–∏–ª—å–º–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â–µ —á—Ç–æ—Ç–æ –ø–æ—Ç—è–Ω—É—Ç—å)
        const getTopList = await handelGetAdditionalData(fetchSideAPI, [urlGetTopListMovie, urlGetTopListShows, urlGetListUpcomingMovie, urlGetListUpcomingShows, urlGetPopularMovies, urlGetPopularShows], ['topMovies', 'topShows', 'upcomingMovies', 'upcomingShows', 'popularMovies', 'popularShows']);
        sortedData.push(...getTopList);
        // –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–¥–∏—Å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 1 —á–∞—Å
        await redis.set(CACHE_KEY, JSON.stringify(sortedData), "EX", 3600);
        // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–æ–Ω—Ç—É
        return sortedData;
    } catch (error) {
        return NextResponse.json(
            {
                 message:error.message || 'Failed to fetch genres',
                 error: error.error || null,
            },
            {
                status: error.status || 500,
            }
        )
    }
}


router.get(async (req, res ) => {
    try {
        // –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∏—Å + –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∞. –í —Å–ª—É—á–∞–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–µ—à–∞ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const catchDataFromRedis = await redis.get(CACHE_KEY);
            if (catchDataFromRedis) {
                return NextResponse.json(JSON.parse(catchDataFromRedis));
            }
        res = await updateCache();
    } catch (e) {

    }
    return NextResponse.json(res);
})



export async function GET (req, res) {
   return router.run(req, res);
}

//—Å—Ç–∞—Ä—ã–π –º–∞—Å–∏–≤–Ω—ã–π –∫–æ–¥ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü—Ä–∏–Ω—è—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π –∫–æ–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –∫–æ–¥–∞.
// router.get(async (req, res ) => {
// let getAllGenreMovie, getAllGenreShows;
// try {
// try {
// –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∏—Å + –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–µ—à–∞. –í —Å–ª—É—á–∞–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∫–µ—à–∞ –∏–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
// const catchDataFromRedis = await redis.get(CACHE_KEY);
// if (catchDataFromRedis) {
//     return NextResponse.json(JSON.parse(catchDataFromRedis));
// }
// –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ —Ñ–∏–ª—å–º–æ–≤ (–≤—Å–µ–≥–æ 19 –∂–∞–Ω—Ä–æ–≤)
//         getAllGenreMovie = await fetchSideAPI(urlGetListAllGenresMovie);
//         // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ —Å–µ—Ä–∏–∞–ª–æ–≤
//         getAllGenreShows = await fetchSideAPI(urlGetListAllGenresShows);
//     } catch (e) {
//         console.error('route error', e);
//         const status = e.status || 500;
//         const errorObj = {
//                 status,
//                 message: 'Failed to fetch genres',
//                 error: e.message,
//             }
//         throw errorObj;
//     }
//     const {genres: genresMovie} = getAllGenreMovie;
//     const {genres: genresShows} = getAllGenreShows;
//     try {
//         // –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–≤—Å–µ–≥–æ 19 –∑–∞–ø—Ä–æ—Å–æ–≤) —Å–æ—Ç–∏—Ä–æ–≤–∫–∞ –∏ –∏–∑–≤–ª–µ—Å—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
//         const sortedData = await Promise.all([genresMovie, genresShows].map((ele, index) => handleReceivingAndSortingData(ele, index, [urlSpecialGenreMovie, urlSpecialGenreShows])));
//         // üçèüçèüçè –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª—å–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–ø–∏—Å–∫–∏ –¥–ª—è —Å–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ñ–∏–ª—å–º–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –¥–æ–ø–∏—Å—ã–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â–µ —á—Ç–æ—Ç–æ –ø–æ—Ç—è–Ω—É—Ç—å)
//         const getTopList = await handelGetAdditionalData(fetchSideAPI, [urlGetTopListMovie, urlGetTopListShows, urlGetListUpcomingMovie, urlGetListUpcomingShows, urlGetPopularMovies, urlGetPopularShows], ['topMovies', 'topShows', 'upcomingMovies', 'upcomingShows', 'popularMovies', 'popularShows']);
//         sortedData.push(...getTopList);
//         // –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–¥–∏—Å –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ 1 —á–∞—Å
//         await redis.set(CACHE_KEY, JSON.stringify(sortedData), "EX", 3600);
//         // –ø–µ—Ä–µ–∑–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–æ–Ω—Ç—É
//         res = sortedData;
//     } catch (e) {
//         console.error('Alarm Fetch Error', e);
//         throw {
//             status: e.status || 500,
//             message: 'Failed to fetch genres',
//             error: e.message,
//         };
//     }
// }catch(err) {
//     return NextResponse.json(
//         {
//              message:err.message || 'Failed to fetch genres',
//              error: err.error || null,
//         },
//         {
//             status: err.status || 500,
//         }
//     )
// }
// return NextResponse.json(res);
// })


